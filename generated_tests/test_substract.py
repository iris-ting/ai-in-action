"# Test strategy:\n# We will test the subtract function with various inputs to ensure it functions correctly.\n#   - Positive numbers\n#   - Negative numbers\n#   - Zero\n#   - A mix of positive and negative numbers\n#\n# Bug Regression:\n# If a bug is found in the subtract function, a new test case should be added to this test suite\n# that specifically targets the bug.  The test case should fail before the bug is fixed, and pass after.\n# This ensures that the bug is not reintroduced in the future.\n\nimport unittest\nfrom substract import substract\n\n\nclass TestSubtract(unittest.TestCase):\n\n    def test_positive_numbers(self):\n        self.assertEqual(substract(5, 2), 3)\n\n    def test_negative_numbers(self):\n        self.assertEqual(substract(-5, -2), -3)\n\n    def test_zero(self):\n        self.assertEqual(substract(5, 0), 5)\n        self.assertEqual(substract(0, 5), -5)\n        self.assertEqual(substract(0, 0), 0)\n\n    def test_mixed_numbers(self):\n        self.assertEqual(substract(5, -2), 7)\n        self.assertEqual(substract(-5, 2), -7)\n\n    def test_large_numbers(self):\n         self.assertEqual(substract(1000000, 1), 999999)\n    \n    def test_negative_result(self):\n         self.assertEqual(substract(1, 2), -1)\n\n    # Example Bug Regression Test\n    def test_bug_regression(self):\n        # Assume a bug was found where subtracting a large number from a small number\n        # resulted in an incorrect value (e.g., overflow).  This test case specifically\n        # targets that scenario. If no specific bug, remove this test case.\n        self.assertEqual(substract(1, 1000000), -999999)\n\n\n\nif __name__ == '__main__':\n    unittest.main()"
